"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[5353],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},p=Object.keys(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),s=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},f="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,p=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),f=s(n),y=a,m=f["".concat(o,".").concat(y)]||f[y]||c[y]||p;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var p=n.length,i=new Array(p);i[0]=y;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[f]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<p;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},7572:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return f}});var r=n(7462),a=n(3366),p=(n(7294),n(3905)),i=["components"],l={id:"is-ref-type",title:"isRefType & isRefTypeArray"},o=void 0,s={unversionedId:"api/functions/typeguards/is-ref-type",id:"api/functions/typeguards/is-ref-type",title:"isRefType & isRefTypeArray",description:"isRefType",source:"@site/../docs/api/functions/typeguards/isRefType.md",sourceDirName:"api/functions/typeguards",slug:"/api/functions/typeguards/is-ref-type",permalink:"/typegoose/versions/beta/docs/api/functions/typeguards/is-ref-type",draft:!1,editUrl:"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/api/functions/typeguards/isRefType.md",tags:[],version:"current",frontMatter:{id:"is-ref-type",title:"isRefType & isRefTypeArray"},sidebar:"docs",previous:{title:"isDocument & isDocumentArray",permalink:"/typegoose/versions/beta/docs/api/functions/typeguards/is-document"},next:{title:"DocumentType<T, QueryHelpers>",permalink:"/typegoose/versions/beta/docs/api/types/document-type"}},d={},f=[{value:"isRefType",id:"isreftype",level:2},{value:"Example",id:"isreftype-example",level:2},{value:"isRefTypeArray",id:"isreftypearray",level:2},{value:"Overload 1",id:"isreftypearray-overload1",level:3},{value:"Overload 2",id:"isreftypearray-overload2",level:3},{value:"Description",id:"isreftypearray-description",level:3},{value:"Example",id:"isreftypearray-example",level:3},{value:"<code>AllowedRefTypes</code>",id:"allowedreftypes",level:2}],c={toc:f},y="wrapper";function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,p.kt)(y,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h2",{id:"isreftype"},"isRefType"),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Typings:")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-ts"},"function isRefType<T, S extends RefType>(doc: Ref<T, S> | null | undefined, refType: AllowedRefTypes): doc is NonNullable<S>\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Parameters:")),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"doc")," ",(0,p.kt)("span",{class:"badge badge--secondary"},"Required")),(0,p.kt)("td",{parentName:"tr",align:"center"},(0,p.kt)("inlineCode",{parentName:"td"},"Ref<T, S>")),(0,p.kt)("td",{parentName:"tr",align:"left"},"The Document to check")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"refType")," ",(0,p.kt)("span",{class:"badge badge--secondary"},"Required")),(0,p.kt)("td",{parentName:"tr",align:"center"},(0,p.kt)("a",{parentName:"td",href:"#allowedreftypes"},(0,p.kt)("inlineCode",{parentName:"a"},"AllowedRefTypes"))),(0,p.kt)("td",{parentName:"tr",align:"left"},"The Expected Reference Type to test for")))),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"isRefType")," checks if the given Input (",(0,p.kt)("inlineCode",{parentName:"p"},"doc"),") is of the given Type (",(0,p.kt)("inlineCode",{parentName:"p"},"refType"),").",(0,p.kt)("br",{parentName:"p"}),"\n","Option ",(0,p.kt)("inlineCode",{parentName:"p"},"refType")," is required because the known Reference Type only exists at compile time, not at runtime so it needs to be explicitly defined (to have accurate checks)."),(0,p.kt)("h2",{id:"isreftype-example"},"Example"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-ts"},'class Cat {\n  @prop({ ref: \'Cat\' })\n  public partner: Ref<Cat>;\n\n  // this example could be smaller, but for demonstation purposes this is a longer version\n  public hasPartner(): boolean {\n    if (isRefType(this.partner, mongoose.Types.ObjectId)) {\n      // "this.partner" now has the type of "Cat._id"\'s RefType (in this case "ObjectId")\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n')),(0,p.kt)("p",null,"-> this could be minified, but for demonstration purposes this will stay the long version"),(0,p.kt)("h2",{id:"isreftypearray"},"isRefTypeArray"),(0,p.kt)("h3",{id:"isreftypearray-overload1"},"Overload 1"),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Typings:")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-ts"},"function isRefTypeArray<T, S extends RefType>(\n  docs: mongoose.Types.Array<Ref<T, S>> | undefined,\n  refType: AllowedRefTypes\n): docs is mongoose.Types.Array<NonNullable<S>>;\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Parameters:")),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"docs")," ",(0,p.kt)("span",{class:"badge badge--secondary"},"Required")),(0,p.kt)("td",{parentName:"tr",align:"center"},(0,p.kt)("inlineCode",{parentName:"td"},"mongoose.Types.Array<Ref<T, S>>")),(0,p.kt)("td",{parentName:"tr",align:"left"},"The Array of Documents to check")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"refType")," ",(0,p.kt)("span",{class:"badge badge--secondary"},"Required")),(0,p.kt)("td",{parentName:"tr",align:"center"},(0,p.kt)("a",{parentName:"td",href:"#allowedreftypes"},(0,p.kt)("inlineCode",{parentName:"a"},"AllowedRefTypes"))),(0,p.kt)("td",{parentName:"tr",align:"left"},"The Expected Reference Type to test for")))),(0,p.kt)("h3",{id:"isreftypearray-overload2"},"Overload 2"),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Typings:")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-ts"},"function isRefTypeArray<T, S extends RefType>(docs: Ref<T, S>[] | undefined, refType: AllowedRefTypes): docs is NonNullable<S>[];\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Parameters:")),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"docs")," ",(0,p.kt)("span",{class:"badge badge--secondary"},"Required")),(0,p.kt)("td",{parentName:"tr",align:"center"},(0,p.kt)("inlineCode",{parentName:"td"},"Ref<T, S>[]")),(0,p.kt)("td",{parentName:"tr",align:"left"},"The Array of Documents to check")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"refType")," ",(0,p.kt)("span",{class:"badge badge--secondary"},"Required")),(0,p.kt)("td",{parentName:"tr",align:"center"},(0,p.kt)("a",{parentName:"td",href:"#allowedreftypes"},(0,p.kt)("inlineCode",{parentName:"a"},"AllowedRefTypes"))),(0,p.kt)("td",{parentName:"tr",align:"left"},"The Expected Reference Type to test for")))),(0,p.kt)("h3",{id:"isreftypearray-description"},"Description"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"isRefTypeArray")," checks if ",(0,p.kt)("strong",{parentName:"p"},"all")," the items in the given Array (",(0,p.kt)("inlineCode",{parentName:"p"},"docs"),") are matching the given Reference type (",(0,p.kt)("inlineCode",{parentName:"p"},"refType"),").",(0,p.kt)("br",{parentName:"p"}),"\n","This function calls ",(0,p.kt)("a",{parentName:"p",href:"#isreftype"},(0,p.kt)("inlineCode",{parentName:"a"},"isRefType"))," for each item in the array.",(0,p.kt)("br",{parentName:"p"}),"\n","Only returns ",(0,p.kt)("inlineCode",{parentName:"p"},"true")," if ",(0,p.kt)("strong",{parentName:"p"},"all")," items in the array return ",(0,p.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,p.kt)("h3",{id:"isreftypearray-example"},"Example"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-ts"},'class Cat {\n  @prop({ ref: \'Cat\' })\n  public kittens: Ref<Cat>;\n\n  // this example could be smaller, but for demonstation purposes this is a longer version\n  public areAllKittensExisting(): boolean {\n    if (isRefTypeArray(this.kittens, mongoose.Types.ObjectId)) {\n      // "this.kittens" now has the type of "Cat._id"\'s RefType (in this case "ObjectId")\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n')),(0,p.kt)("h2",{id:"allowedreftypes"},(0,p.kt)("inlineCode",{parentName:"h2"},"AllowedRefTypes")),(0,p.kt)("p",null,"The Allowed Reference Types for ",(0,p.kt)("inlineCode",{parentName:"p"},"isRefType")," and ",(0,p.kt)("inlineCode",{parentName:"p"},"isRefTypeArray")," are:"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"String")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"Number")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"Buffer")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"mongoose.Types.Buffer")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"mongoose.Types.ObjectId"))))}m.isMDXComponent=!0}}]);