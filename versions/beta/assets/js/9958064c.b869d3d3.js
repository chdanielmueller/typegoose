"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[1061],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,f=c["".concat(s,".").concat(u)]||c[u]||m[u]||i;return n?o.createElement(f,l(l({ref:t},d),{},{components:n})):o.createElement(f,l({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[c]="string"==typeof e?e:a,l[1]=r;for(var p=2;p<i;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5943:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return r},metadata:function(){return p},toc:function(){return c}});var o=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],r={id:"set-global-options",title:"setGlobalOptions"},s=void 0,p={unversionedId:"api/functions/set-global-options",id:"api/functions/set-global-options",title:"setGlobalOptions",description:"Typings:",source:"@site/../docs/api/functions/setGlobalOptions.md",sourceDirName:"api/functions",slug:"/api/functions/set-global-options",permalink:"/typegoose/versions/beta/docs/api/functions/set-global-options",draft:!1,editUrl:"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/api/functions/setGlobalOptions.md",tags:[],version:"current",frontMatter:{id:"set-global-options",title:"setGlobalOptions"},sidebar:"docs",previous:{title:"deleteModel*",permalink:"/typegoose/versions/beta/docs/api/functions/delete-model"},next:{title:"getModelWithString",permalink:"/typegoose/versions/beta/docs/api/functions/get-model-with-string"}},d={},c=[{value:"Example",id:"example",level:2},{value:"Global Typegoose Options",id:"options",level:2},{value:"disableGlobalCaching",id:"disableglobalcaching",level:3}],m={toc:c},u="wrapper";function f(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)(u,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Typings:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"function setGlobalOptions(options: IGlobalOptions)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters:")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"options")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"IGlobalOptions")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The Options to apply globally")))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"setGlobalOptions")," is used to set ",(0,i.kt)("a",{parentName:"p",href:"/typegoose/versions/beta/docs/api/decorators/model-options#schemaoptions"},(0,i.kt)("inlineCode",{parentName:"a"},"schemaOptions"))," and ",(0,i.kt)("a",{parentName:"p",href:"/typegoose/versions/beta/docs/api/decorators/model-options#options-1"},(0,i.kt)("inlineCode",{parentName:"a"},"options"))," of ",(0,i.kt)("a",{parentName:"p",href:"/typegoose/versions/beta/docs/api/decorators/model-options#imodeloptions"},(0,i.kt)("inlineCode",{parentName:"a"},"IModelOptions"))," globally (applied to all schemas created by ",(0,i.kt)("a",{parentName:"p",href:"/typegoose/versions/beta/docs/api/functions/build-schema"},(0,i.kt)("inlineCode",{parentName:"a"},"buildSchema")),") and also set some global operation options for typegoose with ",(0,i.kt)("a",{parentName:"p",href:"#options"},(0,i.kt)("inlineCode",{parentName:"a"},"globalOptions"))," property."),(0,i.kt)("p",null,"Only the specified options in ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," are changed, if a subsequent call is made with different keys, it will not affect other keys, only the first 2 levels are merged."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"setGlobalOptions")," call has to be before any ",(0,i.kt)("inlineCode",{parentName:"p"},"buildSchema")," (by extension also ",(0,i.kt)("inlineCode",{parentName:"p"},"getModelForClass"),") calls, which means when doing ",(0,i.kt)("inlineCode",{parentName:"p"},"export const Model = buildSchema(class)"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"setGlobalOptions")," call has to be before any of the imports that export schemas / models.")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'setGlobalOptions({ options: { allowMixed: Severity.ERROR } });\nsetGlobalOptions({ globalOptions: { disableGlobalCaching: true } }); // does not affect the previous setting of "options"\nsetGlobalOptions({ globalOptions: { someOtherOption: true } }); // does not affect the previous setting of "globalOptions"\nsetGlobalOptions({ options: { disableLowerIndexes: true, allowMixed: Severity.WARN } }); // will overwrite previous setting of "allowMixed"\n\n// the global options would now look like\n{\n  options: {\n    allowMixed: Severity.WARN,\n    disableLowerIndexes: true\n  },\n  globalOptions: {\n    disableGlobalCaching: true,\n    someOtherOption: true\n  }\n}\n')),(0,i.kt)("h2",{id:"options"},"Global Typegoose Options"),(0,i.kt)("h3",{id:"disableglobalcaching"},"disableGlobalCaching"),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)("p",null,"Disables Caching Globally (cannot be overwritten by ",(0,i.kt)("a",{parentName:"p",href:"/typegoose/versions/beta/docs/api/decorators/model-options#disablecaching"},(0,i.kt)("inlineCode",{parentName:"a"},"disableCaching")),")."),(0,i.kt)("p",null,"Setting this ",(0,i.kt)("em",{parentName:"p"},"will not")," clear the existing cache."),(0,i.kt)("p",null,"If only locally disabled cache is needed, see ",(0,i.kt)("a",{parentName:"p",href:"/typegoose/versions/beta/docs/api/decorators/model-options"},(0,i.kt)("inlineCode",{parentName:"a"},"@modelOptions")),"'s ",(0,i.kt)("a",{parentName:"p",href:"/typegoose/versions/beta/docs/api/decorators/model-options#disablecaching"},(0,i.kt)("inlineCode",{parentName:"a"},"disableCaching"))," which does ",(0,i.kt)("em",{parentName:"p"},"not")," have much of the following effects."),(0,i.kt)("p",null,"Effects:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/typegoose/versions/beta/docs/api/functions/delete-model#deletemodel"},(0,i.kt)("inlineCode",{parentName:"a"},"deleteModel"))," & ",(0,i.kt)("a",{parentName:"li",href:"/typegoose/versions/beta/docs/api/functions/delete-model#deletemodelwithclass"},(0,i.kt)("inlineCode",{parentName:"a"},"deleteModelWithClass"))," will throw ",(0,i.kt)("a",{parentName:"li",href:"/typegoose/versions/beta/docs/guides/error-warning-details#cache-disabled-e033"},(0,i.kt)("inlineCode",{parentName:"a"},"E033"))," when used"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/typegoose/versions/beta/docs/api/functions/get-class"},(0,i.kt)("inlineCode",{parentName:"a"},"getClass"))," will throw ",(0,i.kt)("a",{parentName:"li",href:"/typegoose/versions/beta/docs/guides/error-warning-details#cache-disabled-e033"},(0,i.kt)("inlineCode",{parentName:"a"},"E033"))," when used"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/typegoose/versions/beta/docs/api/functions/get-model-with-string"},(0,i.kt)("inlineCode",{parentName:"a"},"getModelWithString"))," will throw ",(0,i.kt)("a",{parentName:"li",href:"/typegoose/versions/beta/docs/guides/error-warning-details#cache-disabled-e033"},(0,i.kt)("inlineCode",{parentName:"a"},"E033"))," when used"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/typegoose/versions/beta/docs/api/functions/build-schema"},(0,i.kt)("inlineCode",{parentName:"a"},"buildSchema"))," will not add anything to the ",(0,i.kt)("inlineCode",{parentName:"li"},"constructors")," cache"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/typegoose/versions/beta/docs/api/functions/add-model-to-typegoose"},(0,i.kt)("inlineCode",{parentName:"a"},"addModelToTypegoose"))," will not add anything to ",(0,i.kt)("inlineCode",{parentName:"li"},"constructors")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"models")," cache (but will still check if the class and model are valid)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/typegoose/versions/beta/docs/api/functions/get-model-for-class"},(0,i.kt)("inlineCode",{parentName:"a"},"getModelForClass"))," & ",(0,i.kt)("a",{parentName:"li",href:"/typegoose/versions/beta/docs/api/functions/get-discriminator-model-for-class"},(0,i.kt)("inlineCode",{parentName:"a"},"getDiscriminatorModelForClass"))," will not try to get anything from cache")))}f.isMDXComponent=!0}}]);