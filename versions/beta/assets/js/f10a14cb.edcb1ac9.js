"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[5391],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8175:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"virtuals",title:"Virtuals"},s=void 0,p={unversionedId:"api/virtuals",id:"api/virtuals",title:"Virtuals",description:"get & set",source:"@site/../docs/api/virtuals.md",sourceDirName:"api",slug:"/api/virtuals",permalink:"/typegoose/versions/beta/docs/api/virtuals",draft:!1,editUrl:"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/api/virtuals.md",tags:[],version:"current",frontMatter:{id:"virtuals",title:"Virtuals"},sidebar:"docs",previous:{title:"Index of Manual-Documentation",permalink:"/typegoose/versions/beta/docs/api/index-api"},next:{title:"Environment Variables",permalink:"/typegoose/versions/beta/docs/api/environment-variables"}},u={},c=[{value:"get &amp; set",id:"get--set",level:2},{value:"Difference between @prop&#39;s get &amp; set and this get &amp; set",id:"difference-between-props-get--set-and-this-get--set",level:3},{value:"Virtual Populate",id:"virtual-populate",level:2},{value:"Extra Notes",id:"extra-notes",level:2},{value:"Why is my virtual not included in the output?",id:"why-is-my-virtual-not-included-in-the-output",level:3}],d={toc:c},m="wrapper";function f(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"get--set"},"get & set"),(0,o.kt)("p",null,"Mongoose offers developers the option to create ",(0,o.kt)("a",{parentName:"p",href:"http://mongoosejs.com/docs/api/schema.html#schema_Schema-virtual"},"virtual properties"),". As virtual properties, they are just 'calculated properties', meaning, there are no actual reads or writes to the database.",(0,o.kt)("br",null),"\nA virtual property can have a setter and a getter. ES6 Classes have ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"set")," functions, which Mongoose uses for virtual property definitions (no Typegoose decorator can be used on them, because they are handled directly by Mongoose)."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Do not confuse this ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"set")," with ",(0,o.kt)("a",{parentName:"p",href:"/typegoose/versions/beta/docs/api/decorators/prop#get--set"},(0,o.kt)("inlineCode",{parentName:"a"},"@prop"),"'s ",(0,o.kt)("inlineCode",{parentName:"a"},"get")," & ",(0,o.kt)("inlineCode",{parentName:"a"},"set")))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"No Typegoose decorator can be used on ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"set")," functions, because they are directly handled by Mongoose.")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Name {\n  @prop()\n  public firstName?: string;\n\n  @prop()\n  public lastName?: string;\n\n  // this will create a virtual property called 'fullName'\n  public get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n  public set fullName(full) {\n    const [firstName, lastName] = full.split(' ');\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n}\n")),(0,o.kt)("p",null,"Resulting Document in MongoDB:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"{\n  _id: ObjectId('<some long id>'),\n  firstName: 'Will',\n  lastName: 'Smith'\n}\n")),(0,o.kt)("h3",{id:"difference-between-props-get--set-and-this-get--set"},"Difference between @prop's get & set and this get & set"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"This shows the difference between ",(0,o.kt)("a",{parentName:"em",href:"/typegoose/versions/beta/docs/api/decorators/prop#get--set"},(0,o.kt)("inlineCode",{parentName:"a"},"@prop"),"'s get & set")," and ",(0,o.kt)("a",{parentName:"em",href:"#get--set"},"this one"))),(0,o.kt)("p",null,"The difference between ",(0,o.kt)("inlineCode",{parentName:"p"},"@prop"),"'s and this one is simple, ",(0,o.kt)("inlineCode",{parentName:"p"},"@prop"),"'s get & set are ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"actual properties"))," that get saved to the database, only with a conversion layer.",(0,o.kt)("br",{parentName:"p"}),"\n","The get & set of ",(0,o.kt)("em",{parentName:"p"},"getter's & setter's")," are absolutely virtual."),(0,o.kt)("h2",{id:"virtual-populate"},"Virtual Populate"),(0,o.kt)("p",null,"Virtual-Populate is also supported by Typegoose"),(0,o.kt)("p",null,"Options (",(0,o.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/api/schema.html#schema_Schema-virtual"},"look here for more details"),"):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ref"),": This is like a normal ",(0,o.kt)("a",{parentName:"li",href:"https://typegoose.github.io/typegoose/docs/api/decorators/prop/#ref"},"ref"),", use ",(0,o.kt)("inlineCode",{parentName:"li"},"'ClassName'")," when the classes are in different files ",(0,o.kt)("span",{class:"badge badge--secondary"},"Required")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"foreignField"),": Which property(on the ref-Class) to match ",(0,o.kt)("inlineCode",{parentName:"li"},"localField")," against ",(0,o.kt)("span",{class:"badge badge--secondary"},"Required")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"localField"),": Which property(on the current-Class) to match ",(0,o.kt)("inlineCode",{parentName:"li"},"foreignField")," against ",(0,o.kt)("span",{class:"badge badge--secondary"},"Required")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"justOne"),": Return as One Document(true) or as Array(false) ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"[Optional]"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"count"),": Return the number of Documents found instead of the actual Documents ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"[Optional]"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"options"),": Extra Query Options ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"[Optional]"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"match"),": Extra Match Options ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"[Optional]")))),(0,o.kt)("p",null,"Example: for an array"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Kittens {\n  @prop({ required: true, ref: () => Cat ) }) // providing the type deferred\n  public parent: Ref<Cat>;\n}\n\nclass Cat {\n  @prop({\n    ref: () => Kittens,\n    foreignField: 'parent', // compare this value to the document populate is called on\n    localField: '_id' // compare this to the foreign document's value defined in \"foreignField\"\n  })\n  public kittens: Ref<Kittens>[];\n}\n")),(0,o.kt)("p",null,"Example: for only one document"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// I couldn't think of a real use case example\nclass Sub {\n  @prop({ required: true, ref: () => Parent }) // providing the type deferred\n  public parent: Ref<Parent>;\n}\n\nclass Parent {\n  @prop({\n    ref: () => Sub,\n    foreignField: 'parent',\n    localField: '_id',\n    justOne: true // when this is not set to \"true\", mongoose will always return a Array\n  })\n  public one: Ref<Sub>;\n}\n")),(0,o.kt)("p",null,"Example (since typegoose 7.4): dynamic ",(0,o.kt)("inlineCode",{parentName:"p"},"ref"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"localField")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"foreignField")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Sub {\n  @prop({ required: true })\n  public parentId!: mongoose.Types.ObjectId;\n}\nclass Parent {\n  @prop({\n    ref: () => (doc: DocumentType<Parent>) => doc.from, // This need to be written this way, because since typegoose \"7.1\", deferred function are supported\n    foreignField: () => 'parentId', // no \"doc\" parameter provided here\n    localField: (doc: DocumentType<Parent>) => doc.local,\n    justOne: false\n  })\n  public nested?: Ref<Sub>[];\n\n  @prop({ required: true })\n  public local!: string;\n\n  @prop({ required: true })\n  public from!: string;\n}\n\n// later in some async code\nconst parent = await ParentModel.create({ local: '_id', from: getName(Sub) });\nawait SubModel.create({ parentId: parent._id });\n")),(0,o.kt)("h2",{id:"extra-notes"},"Extra Notes"),(0,o.kt)("h3",{id:"why-is-my-virtual-not-included-in-the-output"},"Why is my virtual not included in the output?"),(0,o.kt)("p",null,"By default Mongoose doesn't output virtuals. To achieve this, you need to add ",(0,o.kt)("inlineCode",{parentName:"p"},"toObject")," and(/or) ",(0,o.kt)("inlineCode",{parentName:"p"},"toJSON")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"schemaOptions")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"@modelOptions"),"."),(0,o.kt)("p",null,"Note: it can be set in ",(0,o.kt)("inlineCode",{parentName:"p"},"@modelOptions"),", but it can be set in ",(0,o.kt)("inlineCode",{parentName:"p"},"getModelForClass")," too (and in the ",(0,o.kt)("inlineCode",{parentName:"p"},"doc.toJSON()"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"doc.toObject()")," functions)."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Sub {}\n\n@modelOptions({\n  schemaOptions: {\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  }\n})\nclass Parent {\n  @prop({\n    ref: Sub,\n    foreignField: 'parent',\n    localField: '_id',\n    justOne: true\n  })\n  public one: Ref<Sub>;\n}\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"These options will be applied to all classes which inherit the class that got the options applied.")))}f.isMDXComponent=!0}}]);