"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[6733],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=c(n),y=o,m=l["".concat(p,".").concat(y)]||l[y]||d[y]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=y;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[l]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},1306:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={id:"syntax-notes",title:"Syntax Notes"},p=void 0,c={unversionedId:"guides/syntax-notes",id:"guides/syntax-notes",title:"Syntax Notes",description:"This Page shows different possibilities of how code can be written in Typegoose, along with their use-cases and what differs between them.",source:"@site/../docs/guides/syntax-notes.md",sourceDirName:"guides",slug:"/guides/syntax-notes",permalink:"/typegoose/versions/beta/docs/guides/syntax-notes",draft:!1,editUrl:"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/guides/syntax-notes.md",tags:[],version:"current",frontMatter:{id:"syntax-notes",title:"Syntax Notes"},sidebar:"guides",previous:{title:"Error & Warning Details",permalink:"/typegoose/versions/beta/docs/guides/error-warning-details"},next:{title:"Using with class-transformer",permalink:"/typegoose/versions/beta/docs/guides/integration-examples/using-with-class-transformer"}},u={},l=[{value:"<code>type</code> &amp; <code>ref</code> with function or without",id:"type--ref-with-function-or-without",level:2},{value:"<code>type</code> with array or without",id:"type-with-array-or-without",level:2},{value:"Multiple array types",id:"multiple-array-types",level:2},{value:"SubDocument types",id:"subdocument-types",level:2}],d={toc:l},y="wrapper";function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)(y,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This Page shows different possibilities of how code can be written in Typegoose, along with their use-cases and what differs between them."),(0,a.kt)("h2",{id:"type--ref-with-function-or-without"},(0,a.kt)("inlineCode",{parentName:"h2"},"type")," & ",(0,a.kt)("inlineCode",{parentName:"h2"},"ref")," with function or without"),(0,a.kt)("p",null,"The options ",(0,a.kt)("a",{parentName:"p",href:"/typegoose/versions/beta/docs/api/decorators/prop#type"},(0,a.kt)("inlineCode",{parentName:"a"},"type"))," and ",(0,a.kt)("a",{parentName:"p",href:"/typegoose/versions/beta/docs/api/decorators/prop#ref"},(0,a.kt)("inlineCode",{parentName:"a"},"ref"))," can be written either as ",(0,a.kt)("inlineCode",{parentName:"p"},"type: Type")," or as ",(0,a.kt)("inlineCode",{parentName:"p"},"type: () => Type"),'. Both syntax variations are valid options, but the second should always be preferred when not using primitives, because this "deferred function" syntax can workaround the issues of ',(0,a.kt)("a",{parentName:"p",href:"/typegoose/versions/beta/docs/guides/advanced/reference-other-classes#circular-dependencies"},"Circular References")," (in some cases) and also correct situations where you might run into ",(0,a.kt)("inlineCode",{parentName:"p"},"use-before-declaration")," errors."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Cat {\n  @prop({ type: String })\n  public name: string;\n\n  // is the same as\n  @prop({ type: () => String })\n  public name: string;\n}\n\nclass Cat {\n  @prop({ type: Food }) // ERROR: Used before declaration\n  public food: Food;\n\n  @prop({ type: () => Food }) // no error, thanks to the deferred function\n  public food: Food;\n}\n\nclass Food {\n  @prop({ type: String })\n  public vitamins: string;\n}\n")),(0,a.kt)("h2",{id:"type-with-array-or-without"},(0,a.kt)("inlineCode",{parentName:"h2"},"type")," with array or without"),(0,a.kt)("p",null,"When defining the ",(0,a.kt)("a",{parentName:"p",href:"/typegoose/versions/beta/docs/api/decorators/prop"},(0,a.kt)("inlineCode",{parentName:"a"},"type")," in the ",(0,a.kt)("inlineCode",{parentName:"a"},"prop options"))," for an array, the type can be written either as ",(0,a.kt)("inlineCode",{parentName:"p"},"type: Type")," or as ",(0,a.kt)("inlineCode",{parentName:"p"},"type: [Type]"),". Both are valid options and the differences are only cosmetic. However, if you're using more than 1 dimension, it is ",(0,a.kt)("em",{parentName:"p"},"no longer")," cosmetic and the type has to indicate the ",(0,a.kt)("a",{parentName:"p",href:"/typegoose/versions/beta/docs/api/decorators/prop#dim"},"number of dimensions"),". This rule is valid for both ",(0,a.kt)("a",{parentName:"p",href:"#type--ref-with-function-or-without"},(0,a.kt)("inlineCode",{parentName:"a"},"type")," & ",(0,a.kt)("inlineCode",{parentName:"a"},"ref")," with function or without"),"."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If dimension syntax is used in the ",(0,a.kt)("inlineCode",{parentName:"p"},"ref")," option, Typegoose will ",(0,a.kt)("a",{parentName:"p",href:"/typegoose/versions/beta/docs/guides/error-warning-details#the-option-does-not-support-a-option-value-e027"},"throw an error")," because only ",(0,a.kt)("inlineCode",{parentName:"p"},"ref: Type")," is allowed (no array).")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Using dimensions, while not setting the property to be an array, will ",(0,a.kt)("strong",{parentName:"p"},"not")," set the type to an array. Use ",(0,a.kt)("a",{parentName:"p",href:"/typegoose/versions/beta/docs/api/decorators/prop"},"the ",(0,a.kt)("inlineCode",{parentName:"a"},"@prop")," decorator's second parameter")," for that. Or alternatively, when ",(0,a.kt)("a",{parentName:"p",href:"/typegoose/versions/beta/docs/guides/use-without-emitDecoratorMetadata"},(0,a.kt)("inlineCode",{parentName:"a"},"emitDecoratorMetadata"))," is in use and the type is set correctly, then the array type will be set automatically too.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'class Cat {\n  @prop({ type: String }) // one dimensional array\n  public nickNames: string[]; // array type automatically inferred because of "emitDecoratorMetadata" reflection\n\n  // the above and below examples are the same\n  @prop({ type: [String] }) // one dimensional array\n  public nickNames: string[]; // array type automatically inferred because of "emitDecoratorMetadata" reflection\n\n  // to use more dimensions\n  @prop({ type: [[String]] }) // two-dimensional array\n  public nickNames: string[][]; // array type automatically inferred because of "emitDecoratorMetadata" reflection\n\n  @prop({ type: String }, PropType.ARRAY) // one dimensional array, explicitly set to be an array\n  public explicitArray: string[];\n}\n')),(0,a.kt)("h2",{id:"multiple-array-types"},"Multiple array types"),(0,a.kt)("p",null,"There are multiple types an array property can have, all having their use-cases, but most of the time, a simple ",(0,a.kt)("inlineCode",{parentName:"p"},"type[]")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"[type]")," is enough."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'class Cat {\n  @prop({ type: String })\n  public normalArray: string[]; // normal array, will still be a Mongoose array at runtime, but not in types\n\n  @prop({ type: String })\n  public mongooseArray: mongoose.Types.Array<string>; // Mongoose array, with Mongoose functions provided (the "normalArray" would still be this type at runtime)\n\n  // the "ArraySubDocumentType" type is provided by Typegoose\n  @prop({ type: () => Kitten })\n  public subDocArray: ArraySubDocumentType<Kitten>[]; // Mongoose subdocument array, with Mongoose subdocument functions provided\n}\n\nclass Kitten {\n  @prop()\n  public name: string;\n}\n')),(0,a.kt)("h2",{id:"subdocument-types"},"SubDocument types"),(0,a.kt)("p",null,"There are special types to provide the specific Mongoose functions for subdocuments, but they can be omitted when those extra functions aren't needed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'class Cat {\n  @prop({ type: () => Kitten })\n  public normalSubDoc: Kitten; // normal subdocument, no extra Mongoose functions in the types\n\n  // the "SubDocumentType" type is provided by Typegoose\n  @prop({ type: () => Kitten })\n  public typedSubDoc: SubDocumentType<Kitten>; // Mongoose subdocument type, with Mongoose subdocument functions\n\n  // the "ArraySubDocumentType" type is provided by Typegoose\n  @prop({ type: () => Kitten })\n  public subDocArray: ArraySubDocumentType<Kitten>[]; // Mongoose subdocument array, with Mongoose subdocument functions provided\n}\n\nclass Kitten {\n  @prop()\n  public name: string;\n}\n')))}m.isMDXComponent=!0}}]);