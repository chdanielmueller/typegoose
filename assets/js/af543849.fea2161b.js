"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[7748],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,g=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return n?o.createElement(g,r(r({ref:t},u),{},{components:n})):o.createElement(g,r({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return r}});var o=n(7294),a=n(6010),i="tabItem_Ymn6";function r(e){var t=e.children,n=e.hidden,r=e.className;return o.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,r),hidden:n},t)}},5488:function(e,t,n){n.d(t,{Z:function(){return m}});var o=n(7462),a=n(7294),i=n(6010),r=n(2389),s=n(7392),l=n(7094),p=n(2466),u="tabList__CuJ",c="tabItem_LNqP";function d(e){var t,n,r=e.lazy,d=e.block,m=e.defaultValue,g=e.values,f=e.groupId,h=e.className,y=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=g?g:y.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,s.l)(k,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===m?m:null!=(t=null!=m?m:null==(n=y.find((function(e){return e.props.default})))?void 0:n.props.value)?t:y[0].props.value;if(null!==v&&!k.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,l.U)(),N=w.tabGroupChoices,C=w.setTabGroupChoices,S=(0,a.useState)(v),T=S[0],M=S[1],O=[],x=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var K=N[f];null!=K&&K!==T&&k.some((function(e){return e.value===K}))&&M(K)}var E=function(e){var t=e.currentTarget,n=O.indexOf(t),o=k[n].value;o!==T&&(x(t),M(o),null!=f&&C(f,String(o)))},D=function(e){var t,n=null;switch(e.key){case"Enter":E(e);break;case"ArrowRight":var o,a=O.indexOf(e.currentTarget)+1;n=null!=(o=O[a])?o:O[0];break;case"ArrowLeft":var i,r=O.indexOf(e.currentTarget)-1;n=null!=(i=O[r])?i:O[O.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":d},h)},k.map((function(e){var t=e.value,n=e.label,r=e.attributes;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return O.push(e)},onKeyDown:D,onClick:E},r,{className:(0,i.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),r?(0,a.cloneElement)(y.filter((function(e){return e.props.value===T}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},y.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function m(e){var t=(0,r.Z)();return a.createElement(d,(0,o.Z)({key:String(t)},e))}},9382:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return m}});var o=n(7462),a=n(3366),i=(n(7294),n(3905)),r=n(5488),s=n(5162),l=["components"],p={id:"quick-start-guide",title:"Quick Start Guide"},u=void 0,c={unversionedId:"guides/quick-start-guide",id:"guides/quick-start-guide",title:"Quick Start Guide",description:"Quick Overview of Typegoose",source:"@site/../docs/guides/quick-start-guide.md",sourceDirName:"guides",slug:"/guides/quick-start-guide",permalink:"/typegoose/docs/guides/quick-start-guide",draft:!1,editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/guides/quick-start-guide.md",tags:[],version:"current",frontMatter:{id:"quick-start-guide",title:"Quick Start Guide"},sidebar:"guides",next:{title:"FAQ",permalink:"/typegoose/docs/guides/faq"}},d={},m=[{value:"Quick Overview of Typegoose",id:"quick-overview-of-typegoose",level:2},{value:"How to Start using typegoose",id:"how-to-start-using-typegoose",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Install",id:"install",level:3},{value:"How to use Typegoose",id:"how-to-use-typegoose",level:3},{value:"Do&#39;s and Don&#39;ts of Typegoose",id:"dos-and-donts-of-typegoose",level:2},{value:"Extra Examples",id:"extra-examples",level:2},{value:"Static Methods",id:"static-methods",level:3},{value:"Instance Methods",id:"instance-methods",level:3},{value:"Hooks",id:"hooks",level:3}],g={toc:m};function f(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,o.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"quick-overview-of-typegoose"},"Quick Overview of Typegoose"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This Guide is for Typegoose version ~9.0")),(0,i.kt)("p",null,'Typegoose is a "wrapper" for easily writing Mongoose models with TypeScript.'),(0,i.kt)("p",null,"Instead of writing this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// This is a representation of how typegoose's compile output would look\ninterface Car {\n  model?: string;\n}\n\ninterface Job {\n  title?: string;\n  position?: string;\n}\n\ninterface User {\n  name?: string;\n  age!: number;\n  preferences?: string[];\n  mainJob?: Job;\n  jobs?: Job[];\n  mainCar?: Car | string;\n  cars?: (Car | string)[];\n}\n\nconst JobSchema = new mongoose.Schema({\n  title: String;\n  position: String;\n});\n\nconst CarModel = mongoose.model('Car', {\n  model: String,\n});\n\nconst UserModel = mongoose.model('User', {\n  name: { type: String },\n  age: { type: Number, required: true },\n  preferences: [{ type: String }],\n  mainJob: { type: JobSchema },\n  jobs: [{ type: JobSchema }],\n  mainCar: { type: Schema.Types.ObjectId, ref: 'Car' },\n  cars: [{ type: Schema.Types.ObjectId, ref: 'Car' }],\n});\n")),(0,i.kt)("p",null,"You can just write this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class Job {\n  @prop()\n  public title?: string;\n\n  @prop()\n  public position?: string;\n}\n\nclass Car {\n  @prop()\n  public model?: string;\n}\n\nclass User {\n  @prop()\n  public name?: string;\n\n  @prop({ required: true })\n  public age!: number; // This is a single Primitive\n\n  @prop({ type: () => [String] })\n  public preferences?: string[]; // This is a Primitive Array\n\n  @prop()\n  public mainJob?: Job; // This is a single SubDocument\n\n  @prop({ type: () => [Job] })\n  public jobs?: Job[]; // This is a SubDocument Array\n\n  @prop({ ref: () => Car })\n  public mainCar?: Ref<Car>; // This is a single Reference\n\n  @prop({ ref: () => Car })\n  public cars?: Ref<Car>[]; // This is a Reference Array\n}\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"type")," has to be defined when working with Arrays, because Reflection only returns basic information. ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/TypeScript/issues/7169"},"Look here for why"),(0,i.kt)("br",{parentName:"p"}),"\n","Like ",(0,i.kt)("inlineCode",{parentName:"p"},"public: string[]")," is in reflection only ",(0,i.kt)("inlineCode",{parentName:"p"},"Array"),".  ")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator"},"Look here for what ",(0,i.kt)("inlineCode",{parentName:"a"},"!")," means on a property"),(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/functions.html#optional-and-default-parameters"},"Look here for what ",(0,i.kt)("inlineCode",{parentName:"a"},"?")," means on a property"),"  "),(0,i.kt)("h2",{id:"how-to-start-using-typegoose"},"How to Start using typegoose"),(0,i.kt)("h3",{id:"requirements"},"Requirements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"TypeScript version ",(0,i.kt)("inlineCode",{parentName:"li"},"^4.8")," (since 9.13) is recommended, though older ones may also work"),(0,i.kt)("li",{parentName:"ul"},"NodeJS ",(0,i.kt)("inlineCode",{parentName:"li"},"^12.22.0")),(0,i.kt)("li",{parentName:"ul"},"Mongoose ",(0,i.kt)("inlineCode",{parentName:"li"},"~6.7.2")),(0,i.kt)("li",{parentName:"ul"},"A IDE that supports TypeScript linting is recommended to be used (VSCode is recommended)"),(0,i.kt)("li",{parentName:"ul"},"This Guide expects you to know how Mongoose (or at least its models) works"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"experimentalDecorators")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"emitDecoratorMetadata")," must be enabled in ",(0,i.kt)("inlineCode",{parentName:"li"},"tsconfig.json")),(0,i.kt)("li",{parentName:"ul"},"tsconfig option ",(0,i.kt)("inlineCode",{parentName:"li"},"target")," being ",(0,i.kt)("inlineCode",{parentName:"li"},"es6")," (or higher)")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"tsconfig option ",(0,i.kt)("inlineCode",{parentName:"p"},"emitDecoratorMetadata")," is not strictly required, look ",(0,i.kt)("a",{parentName:"p",href:"/typegoose/docs/guides/use-without-emitDecoratorMetadata"},"here")," for more")),(0,i.kt)("h3",{id:"install"},"Install"),(0,i.kt)(r.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save @typegoose/typegoose # install typegoose itself\n\nnpm install --save mongoose # install peer-dependency mongoose\n"))),(0,i.kt)(s.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @typegoose/typegoose # install typegoose itself\n\nyarn add mongoose # install peer-dependency mongoose\n")))),(0,i.kt)("h3",{id:"how-to-use-typegoose"},"How to use Typegoose"),(0,i.kt)("p",null,"Let's say you have a Mongoose model like this one:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const kittenSchema = new mongoose.Schema({\n  name: String\n});\n\nconst KittenModel = mongoose.model('Kitten', kittenSchema);\n\nlet document = await KittenModel.create({ name: 'Kitty' });\n// \"document\" has basic mongoose inferred types\n")),(0,i.kt)("p",null,"With Typegoose, it can be converted to something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class KittenClass {\n  @prop()\n  public name?: string;\n}\n\nconst KittenModel = getModelForClass(KittenClass);\n\nlet document = await KittenModel.create({ name: 'Kitty' });\n// \"document\" has proper (manual) typescript types of KittenClass\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"new KittenModel({} /*<-- this here*/)")," will have type suggestions, but they are ",(0,i.kt)("em",{parentName:"p"},"not enforced"),", ",(0,i.kt)("a",{parentName:"p",href:"/typegoose/docs/guides/faq#why-does-new-model-not-have-types"},"read more here"),".")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Since around mongoose 6.0, mongoose can infer types mostly from the schema definition, but it is still not perfect and arguably less overview-able than typegoose's style of classes.",(0,i.kt)("br",{parentName:"p"}),"\n","Also tsdoc comments are not transferred when using mongoose's inferred types.")),(0,i.kt)("h2",{id:"dos-and-donts-of-typegoose"},"Do's and Don'ts of Typegoose"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Typegoose is a wrapper for Mongoose's models & schemas"),(0,i.kt)("li",{parentName:"ul"},"Typegoose does not modify any functions of Mongoose"),(0,i.kt)("li",{parentName:"ul"},"Typegoose aims to get Mongoose's models to be stable through type-information from classes (without defining extra interfaces)"),(0,i.kt)("li",{parentName:"ul"},"Typegoose aims to make Mongoose more usable by making the models more type-rich with TypeScript"),(0,i.kt)("li",{parentName:"ul"},"Decorated schema configuration classes (like ",(0,i.kt)("inlineCode",{parentName:"li"},"KittenClass")," above) must use explicit type declarations")),(0,i.kt)("h2",{id:"extra-examples"},"Extra Examples"),(0,i.kt)("h3",{id:"static-methods"},"Static Methods"),(0,i.kt)("p",null,"Sometimes extra functions for model creation or pre-written queries are needed, they can be done as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class KittenClass {\n  @prop()\n  public name?: string;\n\n  @prop()\n  public species?: string;\n\n  // the \"this\" definition is required to have the correct types\n  public static async findBySpecies(this: ReturnModelType<typeof KittenClass>, species: string) {\n    return this.find({ species }).exec();\n  }\n}\nconst KittenModel = getModelForClass(KittenClass);\n\nconst docs = await KittenModel.findBySpecies('SomeSpecies');\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"pre-6.0 static functions needed ",(0,i.kt)("inlineCode",{parentName:"p"},"@staticMethod"),", but this is not needed anymore.")),(0,i.kt)("h3",{id:"instance-methods"},"Instance Methods"),(0,i.kt)("p",null,"Sometimes extra functions for manipulating data on an instance are needed, they can be done as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class KittenClass {\n  @prop()\n  public name?: string;\n\n  @prop()\n  public species?: string;\n\n  // the \"this\" definition is required to have the correct types\n  public async setSpeciesAndSave(this: DocumentType<KittenClass>, species: string) {\n    this.species = species;\n    await this.save();\n  }\n}\nconst KittenModel = getModelForClass(KittenClass);\n\nconst doc = new KittenModel({ name: 'SomeCat', species: 'SomeSpecies' });\nawait doc.setSpeciesAndSave('SomeOtherSpecies');\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Pre-6.0 static functions needed ",(0,i.kt)("inlineCode",{parentName:"p"},"@instanceMethod"),", but this is not needed anymore.")),(0,i.kt)("h3",{id:"hooks"},"Hooks"),(0,i.kt)("p",null,"Typegoose also supports hooks. They can be used like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"@pre<KittenClass>('save', function() {\n  this.isKitten = this.age < 1\n})\n@post<KittenClass>('save', function(kitten) {\n  console.log(kitten.isKitten ? 'We have a kitten here.' : 'We have a big kitty here.')\n})\nclass KittenClass {\n  @prop()\n  public name?: string;\n\n  @prop()\n  public species?: string;\n  \n  @prop()\n  public age?: number\n  \n  @prop({ default: false })\n  public isKitten?: boolean\n}\n\nconst KittenModel = getModelForClass(KittenClass);\n\nconst doc = new KittenModel({ name: 'SomeCat', species: 'SomeSpecies', age: 0 });\nawait doc.save(); // this should output \"We have a kitten here.\"\nconst doc = new KittenModel({ name: 'SomeCat', species: 'SomeSpecies', age: 2 });\nawait doc.save(); // this should output \"We have a big kitty here.\"\n")),(0,i.kt)("p",null,"For detailed explanation of Hooks, please see ",(0,i.kt)("a",{parentName:"p",href:"/typegoose/docs/api/decorators/hooks"},"Hooks"),"."),(0,i.kt)("p",null,"Note:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Do not use Arrow Functions, because it will break the binding of ",(0,i.kt)("inlineCode",{parentName:"li"},"this")),(0,i.kt)("li",{parentName:"ul"},"For ESLint users: Make sure that rule ",(0,i.kt)("inlineCode",{parentName:"li"},"eslint-no-use-before-defining")," is disabled, otherwise you might get ESLint errors / warnings inside the hooks")))}f.isMDXComponent=!0}}]);