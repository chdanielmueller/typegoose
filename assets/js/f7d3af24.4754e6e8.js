"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[3215],{3905:function(e,t,o){o.d(t,{Zo:function(){return p},kt:function(){return d}});var n=o(7294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function s(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?s(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function r(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var l=n.createContext({}),m=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},p=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=m(o),d=a,f=u["".concat(l,".").concat(d)]||u[d]||c[d]||s;return o?n.createElement(f,i(i({ref:t},p),{},{components:o})):n.createElement(f,i({ref:t},p))}));function d(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=o.length,i=new Array(s);i[0]=u;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:a,i[1]=r;for(var m=2;m<s;m++)i[m]=o[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"},8373:function(e,t,o){o.r(t),o.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return r},metadata:function(){return m},toc:function(){return c}});var n=o(7462),a=o(3366),s=(o(7294),o(3905)),i=["components"],r={id:"models-with-same-name",title:"Models with same name"},l=void 0,m={unversionedId:"guides/advanced/models-with-same-name",id:"guides/advanced/models-with-same-name",title:"Models with same name",description:"This Guide shows all the possibilities for a model to use different names.",source:"@site/../docs/guides/advanced/models-with-same-name.md",sourceDirName:"guides/advanced",slug:"/guides/advanced/models-with-same-name",permalink:"/typegoose/docs/guides/advanced/models-with-same-name",draft:!1,editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/guides/advanced/models-with-same-name.md",tags:[],version:"current",frontMatter:{id:"models-with-same-name",title:"Models with same name"},sidebar:"guides",previous:{title:"Array Types & Fields",permalink:"/typegoose/docs/guides/advanced/array-types"},next:{title:"Reference other Classes",permalink:"/typegoose/docs/guides/advanced/reference-other-classes"}},p={},c=[{value:"SchemaOptions collection",id:"schemaoptions-collection",level:2},{value:"Typegoose Custom Options &quot;customName&quot;",id:"typegoose-custom-options-customname",level:2},{value:"Notes",id:"notes",level:2}],u={toc:c};function d(e){var t=e.components,o=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This Guide shows all the possibilities for a model to use different names."),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"If Classes with the same name are wanted, these methods need to be used so that Typegoose can differentiate between them")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Since ",(0,s.kt)("inlineCode",{parentName:"p"},"7.6.0")," the name can also be changed in ",(0,s.kt)("inlineCode",{parentName:"p"},"getModelForClass")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"buildSchema")," calls.")),(0,s.kt)("h2",{id:"schemaoptions-collection"},"SchemaOptions collection"),(0,s.kt)("p",null,"For this to work, ",(0,s.kt)("inlineCode",{parentName:"p"},"{ options: { automaticName } }")," must be true."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"{ schemaOptions: { collection } }")," can be used to set a custom collection a model should use.\nUsing ",(0,s.kt)("inlineCode",{parentName:"p"},"{ schemaOptions: { collection } }")," with ",(0,s.kt)("inlineCode",{parentName:"p"},"automaticName")," automatically adds a suffix of the collection to the model's name."),(0,s.kt)("p",null,"Example without ",(0,s.kt)("inlineCode",{parentName:"p"},"automaticName"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"@modelOptions({ schemaOptions: { collection: 'Something' } })\nclass MultiModel {}\n\nconst model = getModelForClass(MultiModel);\nexpect(model.modelName).to.be.equal('MultiModel');\n")),(0,s.kt)("p",null,"Example with ",(0,s.kt)("inlineCode",{parentName:"p"},"automaticName"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"@modelOptions({ schemaOptions: { collection: 'Something' }, options: { automaticName: true } })\nclass MultiModel {}\n\nconst model = getModelForClass(MultiModel);\nexpect(model.modelName).to.be.equal('MultiModel_Something');\n")),(0,s.kt)("h2",{id:"typegoose-custom-options-customname"},'Typegoose Custom Options "customName"'),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"{ options: { customName } }")," can be used to set a custom model name."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"@modelOptions({ options: { customName: 'CustomName' } })\nclass CustomNameOption {}\n\nconst model = getModelForClass(CustomNameOption);\nexpect(model.modelName).to.be.equal('CustomName');\n")),(0,s.kt)("p",null,"If ",(0,s.kt)("inlineCode",{parentName:"p"},"{ options: { customName } }")," is used with ",(0,s.kt)("inlineCode",{parentName:"p"},"{ options: { automaticName: true } }"),", then it will be used as a ",(0,s.kt)("em",{parentName:"p"},"suffix")," of the normal name."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"@modelOptions({ options: { customName: 'CustomName', automaticName: true } })\nclass CustomNameOption {}\n\nconst model = getModelForClass(CustomNameOption);\nexpect(model.modelName).to.be.equal('CustomNameOption_CustomName');\n")),(0,s.kt)("h2",{id:"notes"},"Notes"),(0,s.kt)("p",null,"For more details on the usage of these naming features, please look into ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/typegoose/typegoose/blob/r6/master/test/tests/customName.test.ts"},"the tests that are written for them.")),(0,s.kt)("p",null,"See also ",(0,s.kt)("a",{parentName:"p",href:"/typegoose/docs/guides/advanced/name-generation"},"Typegoose's Name Generation")," for a complete (and hopefully simple) way to understand name generation."))}d.isMDXComponent=!0}}]);