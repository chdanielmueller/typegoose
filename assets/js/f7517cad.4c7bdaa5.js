"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[7243],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return g}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),d=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=d(e.components);return o.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=d(n),u=a,g=m["".concat(p,".").concat(u)]||m[u]||c[u]||r;return n?o.createElement(g,s(s({ref:t},l),{},{components:n})):o.createElement(g,s({ref:t},l))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:a,s[1]=i;for(var d=2;d<r;d++)s[d]=n[d];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7152:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return m}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),s=["components"],i={id:"hooks",title:"@pre & @post"},p=void 0,d={unversionedId:"api/decorators/hooks",id:"api/decorators/hooks",title:"@pre & @post",description:"@pre",source:"@site/../docs/api/decorators/hooks.md",sourceDirName:"api/decorators",slug:"/api/decorators/hooks",permalink:"/typegoose/docs/api/decorators/hooks",draft:!1,editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/api/decorators/hooks.md",tags:[],version:"current",frontMatter:{id:"hooks",title:"@pre & @post"},sidebar:"docs",previous:{title:"@modelOptions",permalink:"/typegoose/docs/api/decorators/model-options"},next:{title:"@index",permalink:"/typegoose/docs/api/decorators/indexes"}},l={},m=[{value:"@pre",id:"pre",level:2},{value:"Example",id:"pre-example",level:2},{value:"@post",id:"post",level:2},{value:"Example",id:"post-example",level:2}],c={toc:m},u="wrapper";function g(e){var t=e.components,n=(0,a.Z)(e,s);return(0,r.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"pre"},"@pre"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Typings:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface PreHooks {\n  pre<S extends object | HydratedDocument<any, any>, T = S extends Document ? S : HydratedDocument<DocumentType<S>, any>>(\n    method: 'save',\n    fn: PreSaveMiddlewareFunction<T>,\n    options?: SchemaPreOptions\n  ): ClassDecorator;\n  pre<S extends object | Query<any, any>, T = S extends Query<any, any> ? S : Query<DocumentType<S>, DocumentType<S>>>(\n    method: MongooseQueryMiddleware | MongooseQueryMiddleware[] | RegExp,\n    fn: PreMiddlewareFunction<T>,\n    options?: SchemaPreOptions\n  ): ClassDecorator;\n  pre<S extends object | HydratedDocument<any, any>, T = S extends Document ? S : HydratedDocument<DocumentType<S>, any>>(\n    method: MongooseDocumentMiddleware | MongooseDocumentMiddleware[] | RegExp,\n    fn: PreMiddlewareFunction<T>,\n    options?: SchemaPreOptions\n  ): ClassDecorator;\n  pre<T extends Aggregate<any>>(method: 'aggregate' | RegExp, fn: PreMiddlewareFunction<T>, options?: SchemaPreOptions): ClassDecorator;\n  pre<S extends AnyParamConstructor<any> | Model<any>, T = S extends Model<any> ? S : ReturnModelType<S>>(\n    method: 'insertMany' | RegExp,\n    fn: (this: T, next: (err?: CallbackError) => void, docs: any | Array<any>) => void | Promise<void>,\n    options?: SchemaPreOptions\n  ): ClassDecorator;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"method")," ",(0,r.kt)("span",{class:"badge badge--secondary"},"Required")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"string \\| RegExp \\| string[]")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The Method(s) to add the ",(0,r.kt)("inlineCode",{parentName:"td"},"fn")," to")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"fn")," ",(0,r.kt)("span",{class:"badge badge--secondary"},"Required")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"Func")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The Function to run for the Method(s) set in ",(0,r.kt)("inlineCode",{parentName:"td"},"method"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"https://mongoosejs.com/docs/api/schema.html#schema_Schema-pre"},(0,r.kt)("inlineCode",{parentName:"a"},"mongoose.SchemaPreOptions"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Options to set when to run the hook")))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@pre")," is used to set Document & Query pre hooks, works like ",(0,r.kt)("inlineCode",{parentName:"p"},"schema.pre")," only difference is the switched ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"method"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"fn"),") parameter positions."),(0,r.kt)("p",null,"For parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"options"),", look at the ",(0,r.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/api/schema.html#schema_Schema-pre"},"mongoose for ",(0,r.kt)("inlineCode",{parentName:"a"},"schema.pre"))," or ",(0,r.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/middleware.html#naming"},"mongoose Middleware section Naming Conflicts"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Arrow Functions cannot be used here, because the binding of ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," is required to get & modify the Document / Query / Aggregate.")),(0,r.kt)("h2",{id:"pre-example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@pre<Car>('save', function () {\n  if (this.model === 'Tesla') {\n    this.isFast = true;\n  }\n})\nclass Car {\n  @prop({ required: true })\n  public model!: string;\n\n  @prop()\n  public isFast?: boolean;\n}\n")),(0,r.kt)("h2",{id:"post"},"@post"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Typings:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface PostHooks {\n  post<S extends object | Query<any, any>, T = S extends Query<any, any> ? S : Query<DocumentType<S>, DocumentType<S>>>(\n    method: MongooseQueryMiddleware | MongooseQueryMiddleware[] | RegExp,\n    fn: PostMiddlewareFunction<T, QueryResultType<T>>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<S extends object | HydratedDocument<any, any>, T = S extends Document ? S : HydratedDocument<DocumentType<S>, any>>(\n    method: MongooseDocumentMiddleware | MongooseDocumentMiddleware[] | RegExp,\n    fn: PostMiddlewareFunction<T, T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<T extends Aggregate<any>>(\n    method: 'aggregate' | RegExp,\n    fn: PostMiddlewareFunction<T, Array<AggregateExtract<T>>>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<S extends AnyParamConstructor<any> | Model<any>, T = S extends Model<any> ? S : ReturnModelType<S>>(\n    method: 'insertMany' | RegExp,\n    fn: PostMiddlewareFunction<T, T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n\n  // error handling post hooks\n  post<S extends object | Query<any, any>, T = S extends Query<any, any> ? S : Query<DocumentType<S>, DocumentType<S>>>(\n    method: MongooseQueryMiddleware | MongooseQueryMiddleware[] | RegExp,\n    fn: ErrorHandlingMiddlewareFunction<T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<S extends object | HydratedDocument<any, any>, T = S extends Document ? S : HydratedDocument<DocumentType<S>, any>>(\n    method: MongooseDocumentMiddleware | MongooseDocumentMiddleware[] | RegExp,\n    fn: ErrorHandlingMiddlewareFunction<T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<T extends Aggregate<any>>(\n    method: 'aggregate' | RegExp,\n    fn: ErrorHandlingMiddlewareFunction<T, Array<any>>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<S extends AnyParamConstructor<any> | Model<any>, T = S extends Model<any> ? S : ReturnModelType<S>>(\n    method: 'insertMany' | RegExp,\n    fn: ErrorHandlingMiddlewareFunction<T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"method")," ",(0,r.kt)("span",{class:"badge badge--secondary"},"Required")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"string \\| RegExp \\| string[]")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The Method(s) to add the ",(0,r.kt)("inlineCode",{parentName:"td"},"fn")," to")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"fn")," ",(0,r.kt)("span",{class:"badge badge--secondary"},"Required")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"Func")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The Function to run for the Method(s) set in ",(0,r.kt)("inlineCode",{parentName:"td"},"method"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"https://mongoosejs.com/docs/api/schema.html#schema_Schema-post"},(0,r.kt)("inlineCode",{parentName:"a"},"mongoose.SchemaPreOptions"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Options to set when to run the hook")))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@post")," is used to set Document & Query pre hooks, works like ",(0,r.kt)("inlineCode",{parentName:"p"},"schema.post")," only difference is the switched ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"method"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"fn"),") parameter positions."),(0,r.kt)("p",null,"For parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"options"),", look at the ",(0,r.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/api/schema.html#schema_Schema-post"},"mongoose for ",(0,r.kt)("inlineCode",{parentName:"a"},"schema.post"))," or ",(0,r.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/middleware.html#naming"},"mongoose Middleware section Naming Conflicts"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Arrow Functions cannot be used here, because the binding of ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," is required to get & modify the Document / Query / Aggregate.")),(0,r.kt)("h2",{id:"post-example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@post<Car>('save', (car) => {\n  if (car.topSpeedInKmH > 300) {\n    console.log(car.model, 'is fast!');\n  }\n})\nclass Car {\n  @prop({ required: true })\n  public model!: string;\n\n  @prop({ required: true })\n  public topSpeedInKmH!: number;\n}\n")))}g.isMDXComponent=!0}}]);