"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[8312],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return y}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},p=Object.keys(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,p=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,y=m["".concat(i,".").concat(u)]||m[u]||d[u]||p;return n?a.createElement(y,o(o({ref:t},s),{},{components:n})):a.createElement(y,o({ref:t},s))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=n.length,o=new Array(p);o[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<p;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3444:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return i},default:function(){return y},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return m}});var a=n(7462),r=n(3366),p=(n(7294),n(3905)),o=["components"],l={id:"document-type",title:"DocumentType<T, QueryHelpers>"},i=void 0,c={unversionedId:"api/types/document-type",id:"api/types/document-type",title:"DocumentType<T, QueryHelpers>",description:"Type DocumentType",source:"@site/../docs/api/types/documentType.md",sourceDirName:"api/types",slug:"/api/types/document-type",permalink:"/typegoose/docs/api/types/document-type",draft:!1,editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/api/types/documentType.md",tags:[],version:"current",frontMatter:{id:"document-type",title:"DocumentType<T, QueryHelpers>"},sidebar:"docs",previous:{title:"isRefType & isRefTypeArray",permalink:"/typegoose/docs/api/functions/typeguards/is-ref-type"},next:{title:"ReturnModelType<T, QueryHelpers>",permalink:"/typegoose/docs/api/types/return-model-type"}},s={},m=[{value:"Type <code>DocumentType</code>",id:"type-documenttype",level:2},{value:"Helper Type <code>SubDocumentType</code>",id:"helper-type-subdocumenttype",level:2},{value:"Helper Type <code>ArraySubDocumentType</code>",id:"helper-type-arraysubdocumenttype",level:2}],d={toc:m},u="wrapper";function y(e){var t=e.components,n=(0,r.Z)(e,o);return(0,p.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h2",{id:"type-documenttype"},"Type ",(0,p.kt)("inlineCode",{parentName:"h2"},"DocumentType")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Typings:")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-ts"},"type DocumentType<T, QueryHelpers = BeAnObject>\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Parameters:")),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"T")," ",(0,p.kt)("span",{class:"badge badge--secondary"},"Required")),(0,p.kt)("td",{parentName:"tr",align:"center"},(0,p.kt)("inlineCode",{parentName:"td"},"object")),(0,p.kt)("td",{parentName:"tr",align:"left"},"The Class to get a document of")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"QueryHelpers")),(0,p.kt)("td",{parentName:"tr",align:"center"},(0,p.kt)("a",{parentName:"td",href:"/typegoose/docs/api/decorators/query-method"},(0,p.kt)("inlineCode",{parentName:"a"},"QueryHelpers"))),(0,p.kt)("td",{parentName:"tr",align:"left"},"Add Query Helpers to the type")))),(0,p.kt)("p",null,"The Type ",(0,p.kt)("inlineCode",{parentName:"p"},"DocumentType<T>")," is the type used for Documents.",(0,p.kt)("br",{parentName:"p"}),"\n","This type is the logical AND of ",(0,p.kt)("inlineCode",{parentName:"p"},"mongoose.Document")," and ",(0,p.kt)("inlineCode",{parentName:"p"},"T"),"."),(0,p.kt)("admonition",{type:"note"},(0,p.kt)("p",{parentName:"admonition"},"With this type, ",(0,p.kt)("inlineCode",{parentName:"p"},"typeof Class")," cannot be used.")),(0,p.kt)("admonition",{type:"caution"},(0,p.kt)("p",{parentName:"admonition"},"If the current project's tsconfig also includes ",(0,p.kt)("inlineCode",{parentName:"p"},"compilerOptions.lib")," with ",(0,p.kt)("inlineCode",{parentName:"p"},"dom"),", then the types from Typegoose and Typescript will conflict.",(0,p.kt)("br",{parentName:"p"}),"\n","Solution is to remove ",(0,p.kt)("inlineCode",{parentName:"p"},"dom")," from the ",(0,p.kt)("inlineCode",{parentName:"p"},"lib")," array.")),(0,p.kt)("p",null,"Example:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-ts"},'class Kitten {\n  @prop()\n  public name?: string;\n\n  // this is an Instance Method\n  public getName(this: DocumentType<Kitten>) {\n    return this.name; // thanks to "DocumentType" "this" has type information\n  }\n}\n')),(0,p.kt)("h2",{id:"helper-type-subdocumenttype"},"Helper Type ",(0,p.kt)("inlineCode",{parentName:"h2"},"SubDocumentType")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Typings:")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-ts"},"type SubDocumentType<T, QueryHelpers = BeAnObject>\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Parameters:")),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"T")," ",(0,p.kt)("span",{class:"badge badge--secondary"},"Required")),(0,p.kt)("td",{parentName:"tr",align:"center"},(0,p.kt)("inlineCode",{parentName:"td"},"object")),(0,p.kt)("td",{parentName:"tr",align:"left"},"The Class to get a document of")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"QueryHelpers")),(0,p.kt)("td",{parentName:"tr",align:"center"},(0,p.kt)("a",{parentName:"td",href:"/typegoose/docs/api/decorators/query-method"},(0,p.kt)("inlineCode",{parentName:"a"},"QueryHelpers"))),(0,p.kt)("td",{parentName:"tr",align:"left"},"Add Query Helpers to the type")))),(0,p.kt)("p",null,"The Type to use for subdocuments, when extra functions like ",(0,p.kt)("inlineCode",{parentName:"p"},".parent")," or document functions are necessary.",(0,p.kt)("br",{parentName:"p"}),"\n","This type is a logical AND of ",(0,p.kt)("inlineCode",{parentName:"p"},"DocumentType")," and ",(0,p.kt)("inlineCode",{parentName:"p"},"mongoose.Types.SubDocument")),(0,p.kt)("p",null,"Example:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-ts"},'class Place {\n  @prop()\n  public name?: string;\n}\n\nclass Cat {\n  @prop({ type: () => Place })\n  public favoritePlace!: SubDocumentType<Place>;\n}\n\nconst CatModel = getModelForClass(Cat);\n\nconst catdoc = new CatModel({ favoritePlace: { name: "countertop" }})\n\ncatdoc.favoritePlace.parent() === catdoc;\n')),(0,p.kt)("h2",{id:"helper-type-arraysubdocumenttype"},"Helper Type ",(0,p.kt)("inlineCode",{parentName:"h2"},"ArraySubDocumentType")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Typings:")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-ts"},"type ArraySubDocumentType<T, QueryHelpers = BeAnObject>\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Parameters:")),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"T")," ",(0,p.kt)("span",{class:"badge badge--secondary"},"Required")),(0,p.kt)("td",{parentName:"tr",align:"center"},(0,p.kt)("inlineCode",{parentName:"td"},"object")),(0,p.kt)("td",{parentName:"tr",align:"left"},"The Class to get a document of")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"QueryHelpers")),(0,p.kt)("td",{parentName:"tr",align:"center"},(0,p.kt)("a",{parentName:"td",href:"/typegoose/docs/api/decorators/query-method"},(0,p.kt)("inlineCode",{parentName:"a"},"QueryHelpers"))),(0,p.kt)("td",{parentName:"tr",align:"left"},"Add Query Helpers to the type")))),(0,p.kt)("p",null,"The Type to use for subdocuments in arrays, when extra functions like ",(0,p.kt)("inlineCode",{parentName:"p"},".parent")," / ",(0,p.kt)("inlineCode",{parentName:"p"},".parentArray")," or document functions are necessary.",(0,p.kt)("br",{parentName:"p"}),"\n","This type is a logical AND of ",(0,p.kt)("inlineCode",{parentName:"p"},"DocumentType")," and ",(0,p.kt)("inlineCode",{parentName:"p"},"mongoose.Types.ArraySubdocument")),(0,p.kt)("p",null,"Example:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-ts"},'class Place {\n  @prop()\n  public name?: string;\n}\n\nclass Cat {\n  @prop({ type: () => Place })\n  public favoritePlaces!: ArraySubDocumentType<Place>[];\n}\n\nconst CatModel = getModelForClass(Cat);\n\nconst catdoc = new CatModel({ favoritePlaces: [{ name: "countertop" }, { name: "printer" }]})\n\ncatdoc.favoritePlaces[0].parent() === catdoc;\ncatdoc.favoritePlaces[0].parentArray() === catdoc.favoritePlaces;\n')))}y.isMDXComponent=!0}}]);