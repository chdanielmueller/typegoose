"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[8174],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),d=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return i.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),m=a,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||r;return t?i.createElement(f,o(o({ref:n},c),{},{components:t})):i.createElement(f,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<r;d++)o[d]=t[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:function(e,n,t){t.d(n,{Z:function(){return o}});var i=t(7294),a=t(6010),r="tabItem_Ymn6";function o(e){var n=e.children,t=e.hidden,o=e.className;return i.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,o),hidden:t},n)}},5488:function(e,n,t){t.d(n,{Z:function(){return m}});var i=t(7462),a=t(7294),r=t(6010),o=t(2389),s=t(7392),l=t(7094),d=t(2466),c="tabList__CuJ",u="tabItem_LNqP";function p(e){var n,t,o=e.lazy,p=e.block,m=e.defaultValue,f=e.values,h=e.groupId,y=e.className,b=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=f?f:b.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),v=(0,s.l)(g,(function(e,n){return e.value===n.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===m?m:null!=(n=null!=m?m:null==(t=b.find((function(e){return e.props.default})))?void 0:t.props.value)?n:b[0].props.value;if(null!==k&&!g.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var M=(0,l.U)(),w=M.tabGroupChoices,N=M.setTabGroupChoices,T=(0,a.useState)(k),x=T[0],A=T[1],B=[],E=(0,d.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var O=w[h];null!=O&&O!==x&&g.some((function(e){return e.value===O}))&&A(O)}var C=function(e){var n=e.currentTarget,t=B.indexOf(n),i=g[t].value;i!==x&&(E(n),A(i),null!=h&&N(h,String(i)))},D=function(e){var n,t=null;switch(e.key){case"ArrowRight":var i,a=B.indexOf(e.currentTarget)+1;t=null!=(i=B[a])?i:B[0];break;case"ArrowLeft":var r,o=B.indexOf(e.currentTarget)-1;t=null!=(r=B[o])?r:B[B.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":p},y)},g.map((function(e){var n=e.value,t=e.label,o=e.attributes;return a.createElement("li",(0,i.Z)({role:"tab",tabIndex:x===n?0:-1,"aria-selected":x===n,key:n,ref:function(e){return B.push(e)},onKeyDown:D,onFocus:C,onClick:C},o,{className:(0,r.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":x===n})}),null!=t?t:n)}))),o?(0,a.cloneElement)(b.filter((function(e){return e.props.value===x}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==x})}))))}function m(e){var n=(0,o.Z)();return a.createElement(p,(0,i.Z)({key:String(n)},e))}},6393:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return d},metadata:function(){return u},toc:function(){return m}});var i=t(7462),a=t(3366),r=(t(7294),t(3905)),o=t(5488),s=t(5162),l=["components"],d={id:"nested-discriminators",title:"Nested Discriminators"},c=void 0,u={unversionedId:"guides/advanced/nested-discriminators",id:"guides/advanced/nested-discriminators",title:"Nested Discriminators",description:"Use-Case",source:"@site/../docs/guides/advanced/nested-discriminators.mdx",sourceDirName:"guides/advanced",slug:"/guides/advanced/nested-discriminators",permalink:"/typegoose/docs/guides/advanced/nested-discriminators",draft:!1,editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/guides/advanced/nested-discriminators.mdx",tags:[],version:"current",frontMatter:{id:"nested-discriminators",title:"Nested Discriminators"},sidebar:"guides",previous:{title:"Non-Nested Discriminators",permalink:"/typegoose/docs/guides/advanced/non-nested-discriminators"},next:{title:"Typegoose's Name Generation",permalink:"/typegoose/docs/guides/advanced/name-generation"}},p={},m=[{value:"Use-Case",id:"use-case",level:2},{value:"First thought",id:"first-thought",level:2},{value:"Fixing it with Nested Discriminators",id:"fixing-it-with-nested-discriminators",level:2},{value:"Extras",id:"extras",level:2},{value:"Multiple ways to define nested discriminators",id:"multiple-ways-to-define-nested-discriminators",level:3},{value:"See Also",id:"see-also",level:2}],f={toc:m};function h(e){var n=e.components,t=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"use-case"},"Use-Case"),(0,r.kt)("p",null,"If you don't know an use case for this, consider the following:",(0,r.kt)("br",{parentName:"p"}),"\n","A Veterinarian that wants to store medication information about the current patients in their care, how would it be done in mongoose / typegoose?"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This Guide will use similar examples and guide style to that from ",(0,r.kt)("a",{parentName:"p",href:"/typegoose/docs/guides/advanced/non-nested-discriminators"},"Non-Nested-Discriminators"),".")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},'Nested Discriminators may also be called "Embedded Discriminators".')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This Guide will use the ",(0,r.kt)("a",{parentName:"p",href:"/typegoose/docs/api/functions/assertions"},(0,r.kt)("inlineCode",{parentName:"a"},"assertion"))," function that typegoose provides.",(0,r.kt)("br",{parentName:"p"}),"\n","TL;DR: This function is basically like NodeJS's ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/api/assert.html#assertvalue-message"},(0,r.kt)("inlineCode",{parentName:"a"},"assert")),", just more typescript friendly.")),(0,r.kt)("h2",{id:"first-thought"},"First thought"),(0,r.kt)("p",null,"At first you might think to do a basic array, that is of type ",(0,r.kt)("inlineCode",{parentName:"p"},"Mixed"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'interface MedicationA {\n  name: string;\n  amount: number;\n}\n\ninterface MedicationB {\n  name: string;\n  length: number;\n}\n\nclass Animal {\n  @prop({ required: true, unique: true })\n  public patientNumber!: number;\n\n  // Even when not setting the type explicitly, the resulting type would be "Mixed" with the typescript type below\n  @prop({ type: mongoose.Schema.Types.Mixed })\n  public medications?: (MedicationA | MedicationB)[];\n}\n\nconst AnimalModel = getModelForClass(Animal);\n')),(0,r.kt)("p",null,"And then in some code accessing the properties:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const doc = await AnimalModel.create({\n  patientNumber: 0,\n  medications: [\n    {\n      name: 'med1',\n      amount: 10,\n    } as MedicationA,\n    {\n      name: 'med2',\n      length: 5,\n    } as MedicationB,\n    {\n      unknownType: 1,\n    },\n  ],\n});\n\nassertion(doc.medications[0].name === 'med1');\nassertion(doc.medications[1].name === 'med2');\nassertion(doc.medications[2].unknownType === 1);\nassertion(doc.medications.length === 3);\n")),(0,r.kt)("p",null,"Which is obviously problematic:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"No Runtime validation and no Middleware applied to elements of the array (because of type ",(0,r.kt)("inlineCode",{parentName:"li"},"Mixed"),")"),(0,r.kt)("li",{parentName:"ul"},"Because of no validation, unknown properties like ",(0,r.kt)("inlineCode",{parentName:"li"},"unknownType")," will persist")),(0,r.kt)("h2",{id:"fixing-it-with-nested-discriminators"},"Fixing it with Nested Discriminators"),(0,r.kt)("p",null,"The code from ",(0,r.kt)("a",{parentName:"p",href:"#first-thought"},"First though")," is not that far off of what nested discriminators will need to work:"),(0,r.kt)(o.Z,{groupId:"diff-full",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"diff",label:"Difference",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"+ @modelOptions({\n+   schemaOptions: {\n+     // Set the property key which is used to discriminate between the different types\n+     discriminatorKey: 'name',\n+     // Disable automatic \"_id\" property\n+     _id: false,\n+   },\n+ })\n+ class MedicationBase {\n+   @prop({ required: true })\n+   public name!: string;\n+ }\n\n+ enum MedicationTypes {\n+   MedicationA = 'MedicationA',\n+   MedicationB = 'MedicationB',\n+ }\n\n- interface MedicationA {\n-   name: string;\n-   amount: number;\n+ class MedicationA extends MedicationBase {\n+   @prop({ required: true })\n+   public amount!: number;\n}\n\n- interface MedicationB {\n-   name: string;\n-   length: number;\n+ class MedicationB extends MedicationBase {\n+   @prop({ required: true })\n+   public length!: number;\n}\n\nclass Animal {\n  @prop({ required: true, unique: true })\n  public patientNumber!: number;\n\n-   // Even when not setting the type explicitly, the resulting type would be \"Mixed\" with the typescript type below\n-   @prop({ type: mongoose.Schema.Types.Mixed })\n-   public medications?: (MedicationA | MedicationB)[];\n+   @prop({\n+     required: true,\n+     // Set the Base class, which all types need to extend from\n+     type: MedicationBase,\n+     // Set the nested discriminators that are used for this property\n+     discriminators: () => [\n+       // The \"advanced\" way of defining types is used here, to make it easier to understand\n+       { type: MedicationA, value: MedicationTypes.MedicationA },\n+       { type: MedicationB, value: MedicationTypes.MedicationB },\n+     ],\n+   })\n+   public medications!: MedicationBase[];\n}\n\nconst AnimalModel = getModelForClass(Animal);\n"))),(0,r.kt)(s.Z,{value:"fullcode",label:"Full Code",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@modelOptions({\n  schemaOptions: {\n    // Set the property key which is used to discriminate between the different types\n    discriminatorKey: 'name',\n    // Disable automatic \"_id\" property\n    _id: false,\n  },\n})\nclass MedicationBase {\n  @prop({ required: true })\n  public name!: string;\n}\n\n// A Enum is used to easily keep track of different types, instead of hardcoding it in many places\nenum MedicationTypes {\n  MedicationA = 'MedicationA',\n  MedicationB = 'MedicationB',\n}\n\nclass MedicationA extends MedicationBase {\n  @prop({ required: true })\n  public amount!: number;\n}\n\nclass MedicationB extends MedicationBase {\n  @prop({ required: true })\n  public length!: number;\n}\n\nclass Animal {\n  @prop({ required: true, unique: true })\n  public patientNumber!: number;\n\n  @prop({\n    required: true,\n    // Set the Base class, which all types need to extend from\n    type: MedicationBase,\n    // Set the nested discriminators that are used for this property\n    discriminators: () => [\n      // The \"advanced\" way of defining types is used here, to make it easier to understand, see section #Extras\n      { type: MedicationA, value: MedicationTypes.MedicationA },\n      { type: MedicationB, value: MedicationTypes.MedicationB },\n    ],\n  })\n  public medications!: MedicationBase[];\n}\n\nconst AnimalModel = getModelForClass(Animal);\n")))),(0,r.kt)("p",null,"And then in some code accessing the properties again:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const doc = await AnimalModel.create({\n  patientNumber: 1,\n  medications: [\n    {\n      name: MedicationTypes.MedicationA,\n      amount: 10,\n    } as MedicationA,\n    {\n      name: MedicationTypes.MedicationB,\n      length: 5,\n    } as MedicationB,\n  ],\n});\n\ntry {\n  await AnimalModel.create({\n    patientNumber: 2,\n    medications: [\n      {\n        unknownType: 1,\n      },\n    ],\n  });\n\n  throw new Error('Expected create to fail');\n} catch (err) {\n  assertion(err instanceof mongoose.Error.ValidationError);\n}\n\nassertion(doc.medications[0].name === MedicationTypes.MedicationA);\nassertion(doc.medications[1].name === MedicationTypes.MedicationB);\nassertion(doc.medications.length === 2);\n")),(0,r.kt)("p",null,"This Time, it will correctly validate and apply middleware to all elements of the array, meaning it will correctly strip all unknown elements and error if elements are missing (as can be seen in the ",(0,r.kt)("inlineCode",{parentName:"p"},"try-catch"),")."),(0,r.kt)("h2",{id:"extras"},"Extras"),(0,r.kt)("h3",{id:"multiple-ways-to-define-nested-discriminators"},"Multiple ways to define nested discriminators"),(0,r.kt)("p",null,"There are currently multiple ways to define nested discriminators, which are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Directly and only the ",(0,r.kt)("inlineCode",{parentName:"li"},"Class")),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"DiscriminatorObject")," (which is used in the examples)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'class Animal {\n  @prop({\n    type: MedicationBase,\n    // Define nested discriminators with a "DiscriminatorObject"\n    // Explicitly set the discriminator value\n    discriminators: () => [\n      { type: MedicationA, value: MedicationTypes.MedicationA },\n      { type: MedicationB, value: MedicationTypes.MedicationB },\n    ],\n    // Define nested discriminators with the "Class" directly\n    // Implicitly converts the generated model name to the discriminator value\n    discriminators: () => [\n      MedicationA,\n      MedicationB,\n    ],\n  })\n  public medications!: MedicationBase[];\n}\n')),(0,r.kt)("p",null,"See ",(0,r.kt)("inlineCode",{parentName:"p"},"@prop")," option ",(0,r.kt)("a",{parentName:"p",href:"/typegoose/docs/api/decorators/prop#discriminators"},(0,r.kt)("inlineCode",{parentName:"a"},"discriminators")),"."),(0,r.kt)("h2",{id:"see-also"},"See Also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Also see the blog post from ",(0,r.kt)("inlineCode",{parentName:"li"},"thecodebarbarian")," (or also known as ",(0,r.kt)("inlineCode",{parentName:"li"},"vkarpov15")," on github) about ",(0,r.kt)("a",{parentName:"li",href:"https://thecodebarbarian.com/mongoose-4.12-single-embedded-discriminators.html"},"Embedded Discriminators"),".")))}h.isMDXComponent=!0}}]);